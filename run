#!/usr/bin/env bash
# Amazon Video Automation - unified runner
# Creates/uses .venv, installs deps, and runs the full workflow in order.
set -euo pipefail

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PROJECT_ROOT"

VENV_DIR="${PROJECT_ROOT}/.venv"
PY="${VENV_DIR}/bin/python3"
PIP="${VENV_DIR}/bin/pip"

# ---- Edit these paths only if your scripts live elsewhere ----
VALIDATE_SCRIPT="tools/validators/pack_validator.py"
OVERLAYS_SCRIPT="tools/overlays/cta_overlay.py"
BUILD_SCRIPT="tools/videos/build_videos.py"
REPORT_SCRIPT="tools/analytics/generate_report.py"

# Optional defaults for IO (override via env: PACKS=... OUT=... etc.)
PACKS="${PACKS:-packs}"
OUT="${OUT:-out}"
LOGS_DIR="${LOGS:-logs}"
REPORTS_DIR="${REPORTS:-reports}"

# ---- Helpers ----
ensure_dirs() {
  mkdir -p "$LOGS_DIR" "$REPORTS_DIR" "tools/analytics" || true
}

ensure_venv() {
  if [[ ! -x "${PY}" ]]; then
    echo "[] Creating virtual environment..."
    python3 -m venv "${VENV_DIR}"
    "${PIP}" install --upgrade pip
  fi
}

install_deps() {
  if [[ -f requirements.txt ]]; then
    echo "[] Installing dependencies from requirements.txt..."
    "${PIP}" install --upgrade -r requirements.txt
  else
    echo "[] requirements.txt not found; installing minimal deps..."
    "${PIP}" install --upgrade mutagen PyYAML
  fi
}

run_py() {
  local script_path="$1"; shift || true
  if [[ -f "$script_path" ]]; then
    echo "→ Running ${script_path} $*"
    "${PY}" "$script_path" "$@"
  else
    echo "! Skipping: ${script_path} not found"
  fi
}

doctor() {
  echo "[] Python: $(${PY} -V 2>/dev/null || echo 'not yet created')"
  echo "[] Pip packages:"
  if [[ -x "${PIP}" ]]; then "${PIP}" list; else echo "(venv not created)"; fi
}

# ---- Commands ----
cmd_setup() { ensure_dirs; ensure_venv; install_deps; doctor; }
cmd_validate() { run_py "${VALIDATE_SCRIPT}" --packs "${PACKS}" --out "${OUT}" --logs "${LOGS_DIR}"; }
cmd_overlays() { run_py "${OVERLAYS_SCRIPT}" --packs "${PACKS}" --out "${OUT}" --logs "${LOGS_DIR}"; }
cmd_build() { run_py "${BUILD_SCRIPT}" --packs "${PACKS}" --out "${OUT}" --logs "${LOGS_DIR}"; }
cmd_report() { run_py "${REPORT_SCRIPT}" --packs "${PACKS}" --out "${OUT}" --logs "${LOGS_DIR}" --reports "${REPORTS_DIR}"; }

cmd_all() {
  cmd_setup
  cmd_validate
  cmd_overlays
  cmd_build
  cmd_report
  echo "✓ Done."
}

cmd_help() {
  cat <<EOF
Usage: ./run <command> [args]

Commands:
  setup        Create venv and install deps
  validate     Run pack validator
  overlays     Generate CTA overlays
  build        Build videos
  report       Generate analytics report
  all          Setup + validate + overlays + build + report
  doctor       Show environment info
  help         Show this help

Env overrides:
  PACKS=... OUT=... LOGS=... REPORTS=...

Examples:
  ./run all
  PACKS=packs/coffee ./run build
  ./run doctor
EOF
}

# ---- Entry ----
cmd="${1:-all}"; shift || true
case "$cmd" in
  setup) cmd_setup "$@" ;;
  validate) cmd_validate "$@" ;;
  overlays) cmd_overlays "$@" ;;
  build) cmd_build "$@" ;;
  report) cmd_report "$@" ;;
  all) cmd_all "$@" ;;
  doctor) doctor ;;
  help|-h|--help) cmd_help ;;
  *) echo "Unknown command: $cmd"; cmd_help; exit 1 ;;
esac
